start: stmt+ 

stmt: exp

exp: BOOL | NUMBER | ID 
   | num_op | logical_op | fun_def 
   | fun_call | if_exp | def_stmt
   | print_stmt | named_fun_def

def_stmt: "(define" ID exp ")"  
print_stmt:  "(print-num" exp ")"  -> print_num
           | "(print-bool" exp ")" -> print_bool

num_op: "(+" exp exp+ ")"  -> plus
      | "(-" exp exp ")" -> minus
      | "(*" exp exp+ ")"    -> multiply
      | "(/" exp exp ")" -> divide
      | "(mod" exp exp ")" -> module
      | "(>" exp exp ")"  -> greater
      | "(<" exp exp ")"  -> smaller
      | "(=" exp exp+ ")"  -> equal

logical_op: "(and" exp exp+ ")" -> and_op
          | "(or" exp exp+ ")"  -> or_op
          | "(not" exp ")"  -> not_op


fun_def: "(fun" "(" params ")" exp ")"  
params  : ID*

fun_call: "(" fun_def exp* ")" | "(" ID exp* ")"  
named_fun_def: "(define" ID "(fun" "(" params ")" exp ")" ")"


if_exp: "(if" exp exp exp ")"

BOOL: "#t" | "#f"
NUMBER: /-?[0-9]+/
ID: /[a-z][a-z0-9\-]*/


%import common.WS
%ignore WS
